// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {ERC20} from "@openzeppelin/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/access/Ownable.sol";
import {AccessControl} from "@openzeppelin/access/AccessControl.sol";

/**
 * @title Rebase Token
 * @author Rahul Kumar Mahto(Isihin)
 * @notice yet to write
 */
contract RebaseToken is ERC20, Ownable, AccessControl {
    error RebaseToken__IntrestCanOnlyDecrease(uint256 s_intrestRate, uint256 _newIntersetRate);

    uint256 private constant PRECISION_FACTOR = 1e18;
    uint256 private s_intrestRate = (5 * PRECISION_FACTOR) / 1e8;
    bytes32 private constant MINT_AND_BURN_ROLE = keccak256("MINT_AND_BURN_ROLE");
    mapping(address => uint256) s_userIntrestRate;
    mapping(address => uint256) s_userLastPriceTimestamp;

    event IntrestRateSet(uint256 indexed newIntrestRate);

    constructor() ERC20("Rebase Token", "RT") Ownable(msg.sender) {}

    function grantMintAndBurnRole(address _account) external onlyOwner {
        _grantRole(MINT_AND_BURN_ROLE, _account);
    }

    /**
     * @notice set the interest of the contract
     * @param _newIntersetRate  The new intreset rate to set
     * @dev The interest can only decrease
     */
    function setIntrestRate(uint256 _newIntersetRate) external onlyOwner {
        if (s_intrestRate < _newIntersetRate) {
            revert RebaseToken__IntrestCanOnlyDecrease(s_intrestRate, _newIntersetRate);
        }

        s_intrestRate = _newIntersetRate;
        emit IntrestRateSet(_newIntersetRate);
    }

    /**
     * @notice Returns the principal balance of the user
     * @param _user the address og the user
     */
    function principleBalanceOf(address _user) external view returns (uint256) {
        return super.balanceOf(_user);
    }

    /**
     * @notice Mints new tokens for a given address. Called when a user either deposits or bridges to this chain
     * @param _to Address to mint the token
     * @param _amount Amount of tokens to mint
     * @dev this function increases the total supply
     */
    function mint(address _to, uint256 _amount, uint256 _userIntrestRate) external onlyRole(MINT_AND_BURN_ROLE) {
        _mintAccruedIntrest(_to);
        s_userIntrestRate[_to] = _userIntrestRate;
        _mint(_to, _amount);
    }

    /**
     * @notice Burns the tokens from the sender
     * @param _from user who want to burn token
     * @param _amount amount of token to burn
     * @dev this function decreases the total supply
     */
    function burn(address _from, uint256 _amount) external onlyRole(MINT_AND_BURN_ROLE) {
        _mintAccruedIntrest(_from);
        _burn(_from, _amount);
    }

    /**
     * @notice It only shows the balance with accrued intrest. The accrued intrest is not being minted here
     * @param _user User for which the balance is being calculated
     * @dev Calculates the balance of the user, which is
     * principal balance + intreset generated by the principal by the time
     */
    function balanceOf(address _user) public view override returns (uint256) {
        return super.balanceOf(_user) * _calculateUserAccumulatedInterestSinceLastUpdate(_user) / PRECISION_FACTOR;
    }

    /**
     * @param _recipent address of the receiver
     * @param _amount  Amount of token to transfer
     * @return true if the transfer was successful
     * @dev Transfers token from msg.sender to the recipent. This function also mint the accrued intrest from the senders and recipents address
     */
    function transfer(address _recipent, uint256 _amount) public override returns (bool) {
        if (_amount == type(uint256).max) {
            _amount = balanceOf(msg.sender);
        }
        _mintAccruedIntrest(msg.sender);
        _mintAccruedIntrest(_recipent);
        if (s_userIntrestRate[_recipent] == 0) {
            s_userIntrestRate[_recipent] = s_userIntrestRate[msg.sender];
        }

        return super.transfer(_recipent, _amount);
    }

    /**
     * @param _sender address of sender
     * @param _recipent address of recipent
     * @param _amount amount to transfer
     * @return true if the transfer was succesful
     * @dev this function takes sender, recievers address and amount of token. it also mint any accrued interest since the last time
     */
    function transferFrom(address _sender, address _recipent, uint256 _amount) public override returns (bool) {
        if (_amount == type(uint256).max) {
            _amount = balanceOf(msg.sender);
        }
        _mintAccruedIntrest(_sender);
        _mintAccruedIntrest(_recipent);
        if (s_userIntrestRate[_recipent] == 0) {
            s_userIntrestRate[_recipent] = s_userIntrestRate[_sender];
        }

        return super.transferFrom(_sender, _recipent, _amount);
    }

    /**
     * @param _user address of the user
     * @return lineraIntrestFactor the interest accrued since the last update
     * @dev it returns the interest accrued during the time period between the time of mint and present time
     */
    function _calculateUserAccumulatedInterestSinceLastUpdate(address _user)
        internal
        view
        returns (uint256 lineraIntrestFactor)
    {
        uint256 timeElapsed = block.timestamp - s_userLastPriceTimestamp[_user];
        lineraIntrestFactor = (PRECISION_FACTOR + (s_userIntrestRate[_user] * timeElapsed));
    }

    /**
     * @param _user address of the user whose accured interest has to be minted
     * @dev accumulates the accured interest of the user to the principal balance. This function mints the accrued interest since they transferred to bridge tokens.
     */
    function _mintAccruedIntrest(address _user) internal {
        uint256 previousPrincipleBalance = super.balanceOf(_user);
        uint256 currentBalance = balanceOf(_user);
        uint256 balanceIncrease = currentBalance - previousPrincipleBalance;
        s_userLastPriceTimestamp[_user] = block.timestamp;
        _mint(_user, balanceIncrease);
    }

    /**
     * @return s_intrestRate
     * @dev returns the global interest rate of the token for future depositors
     */
    function getIntrestRate() external view returns (uint256) {
        return s_intrestRate;
    }

    /**
     * @dev returns the interest of the user
     * @param _user address of the user to
     * @return s_userIntrestRate the interest rate of the user
     */
    function getUserIntrest(address _user) external view returns (uint256) {
        return s_userIntrestRate[_user];
    }
}
